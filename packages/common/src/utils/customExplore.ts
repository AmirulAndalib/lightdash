import { SupportedDbtAdapter } from '../types/dbt';
import { Explore } from '../types/explore';
import {
    CompiledDimension,
    CompiledMetric,
    DimensionType,
    fieldId,
    FieldType,
    friendlyName,
    MetricType,
} from '../types/field';
import { MetricQuery } from '../types/metricQuery';
import { ApiSqlQueryResults } from '../types/sqlRunner';

export const CUSTOM_EXPLORE_ALIAS_NAME = 'custom_explore';

const isId = (id: string) => id.endsWith('_id') || id === 'id';

export const convertQueryResultsToDimensions = (
    fields: Record<string, { type: DimensionType }>,
): Record<string, CompiledDimension> =>
    Object.entries(fields).reduce<Record<string, CompiledDimension>>(
        (acc, [key, { type }]) =>
            type === DimensionType.NUMBER && !isId(key)
                ? acc
                : {
                      ...acc,
                      [key]: {
                          fieldType: FieldType.DIMENSION,
                          type,
                          name: key,
                          label: friendlyName(key),
                          table: CUSTOM_EXPLORE_ALIAS_NAME,
                          tableLabel: '',
                          sql: `"${CUSTOM_EXPLORE_ALIAS_NAME}".${key}`,
                          compiledSql: `"${CUSTOM_EXPLORE_ALIAS_NAME}".${key}`,
                          tablesReferences: [CUSTOM_EXPLORE_ALIAS_NAME],
                          hidden: false,
                      },
                  },
        {},
    );

export const convertQueryResultsToMetrics = (
    fields: Record<string, { type: DimensionType }>,
): Record<string, CompiledMetric> =>
    Object.entries(fields).reduce<Record<string, CompiledMetric>>(
        (acc, [key, { type }]) =>
            type === DimensionType.NUMBER && !isId(key)
                ? {
                      ...acc,
                      [key]: {
                          fieldType: FieldType.METRIC,
                          type: MetricType.NUMBER,
                          name: key,
                          label: friendlyName(key),
                          table: CUSTOM_EXPLORE_ALIAS_NAME,
                          tableLabel: '',
                          // TODO: ??
                          isAutoGenerated: true,
                          sql: `SUM("${CUSTOM_EXPLORE_ALIAS_NAME}".${key})`,
                          compiledSql: `SUM("${CUSTOM_EXPLORE_ALIAS_NAME}".${key})`,
                          tablesReferences: [CUSTOM_EXPLORE_ALIAS_NAME],
                          hidden: false,
                      },
                  }
                : acc,
        {},
    );

export const getCustomExploreFromQueryResultsAndSql = (
    sql: string,
    queryResults: ApiSqlQueryResults,
): Explore => ({
    name: CUSTOM_EXPLORE_ALIAS_NAME,
    label: 'Custom SQL query',
    tags: [],
    baseTable: CUSTOM_EXPLORE_ALIAS_NAME,
    joinedTables: [],
    tables: {
        custom_explore: {
            // TODO: support metrics
            name: CUSTOM_EXPLORE_ALIAS_NAME,
            label: 'Custom Explore',
            // TODO: support warehouse...
            database: 'postgres',
            schema: 'jaffle',
            sqlTable: `(
                ${sql}
)`,
            dimensions: convertQueryResultsToDimensions(queryResults.fields),
            metrics: convertQueryResultsToMetrics(queryResults.fields),
            lineageGraph: {},
        },
    },
    // TODO: support warehouse...
    targetDatabase: SupportedDbtAdapter.POSTGRES,
});

export const getMetricQueryFromResults = (
    results: ApiSqlQueryResults,
): MetricQuery => ({
    exploreName: CUSTOM_EXPLORE_ALIAS_NAME,
    dimensions: Object.values(
        convertQueryResultsToDimensions(results.fields),
    ).map((f) => fieldId(f)),
    metrics: Object.values(convertQueryResultsToMetrics(results.fields)).map(
        (f) => fieldId(f),
    ),
    filters: {},
    sorts: [],
    limit: 0,
    tableCalculations: [],
});
